

using UnityEngine;


//
// Autogenerated by gaxb ( https://github.com/SmallPlanet/gaxb )
//

using System;
using System.Xml;
using System.Text;
using System.Reflection;
using System.Collections.Generic;
using System.Collections;
using System.Security;
using TB;

public partial class PUParticles : PUParticlesBase {

	public PUParticles()
	{
		string attr;

		attr = "true";
		if(attr != null) { limitToInside = bool.Parse(attr); } 
		attr = "SystemScaled";
		if(attr != null) { emitMode = (PlanetUnity2.ParticleEmitMode)Enum.Parse(typeof(PlanetUnity2.ParticleEmitMode), attr); } 
		attr = "true";
		if(attr != null) { adjustToFPS = bool.Parse(attr); } 

	}
	

	public PUParticles(
			string systemName,
			bool limitToInside,
			PlanetUnity2.ParticleEmitMode emitMode,
			bool adjustToFPS,
			Vector2 customScale,
			string imageMaskPath ) : this()
	{
		this.systemName = systemName;

		this.limitToInside = limitToInside;

		this.emitMode = emitMode;

		this.adjustToFPS = adjustToFPS;

		this.customScale = customScale;

		this.imageMaskPath = imageMaskPath;
	}

	

	public PUParticles(
			string systemName,
			bool limitToInside,
			PlanetUnity2.ParticleEmitMode emitMode,
			bool adjustToFPS,
			Vector2 customScale,
			string imageMaskPath,
			Vector4 bounds,
			Vector3 position,
			Vector2 size,
			Vector3 rotation,
			Vector3 scale,
			Vector2 pivot,
			string anchor,
			bool active,
			bool rectMask2D,
			bool mask,
			bool showMaskGraphic,
			Vector4 maskInset,
			bool outline,
			float lastY,
			float lastX,
			string shader,
			bool ignoreMouse,
			string components,
			string title,
			string tag,
			string tag1,
			string tag2,
			string tag3,
			string tag4,
			string tag5,
			string tag6 ) : this()
	{
		this.systemName = systemName;

		this.limitToInside = limitToInside;

		this.emitMode = emitMode;

		this.adjustToFPS = adjustToFPS;

		this.customScale = customScale;

		this.imageMaskPath = imageMaskPath;

		this.bounds = bounds;

		this.position = position;

		this.size = size;

		this.rotation = rotation;

		this.scale = scale;

		this.pivot = pivot;

		this.anchor = anchor;

		this.active = active;

		this.rectMask2D = rectMask2D;

		this.mask = mask;

		this.showMaskGraphic = showMaskGraphic;

		this.maskInset = maskInset;

		this.outline = outline;

		this.lastY = lastY;

		this.lastX = lastX;

		this.shader = shader;

		this.ignoreMouse = ignoreMouse;

		this.components = components;

		this.title = title;

		this.tag = tag;

		this.tag1 = tag1;

		this.tag2 = tag2;

		this.tag3 = tag3;

		this.tag4 = tag4;

		this.tag5 = tag5;

		this.tag6 = tag6;
	}


}




public class PUParticlesBase : PUCustomGeometry {






	// XML Attributes
	public string raw_systemName;
	public string systemName;
	public string raw_limitToInside;
	public bool limitToInside;
	public string raw_emitMode;
	public PlanetUnity2.ParticleEmitMode? emitMode;
	public string raw_adjustToFPS;
	public bool adjustToFPS;
	public string raw_customScale;
	public Vector2? customScale;
	public string raw_imageMaskPath;
	public string imageMaskPath;




	public override void gaxb_unload()
	{
		base.gaxb_unload();

	}

	public new void gaxb_addToParent()

	{
		if(parent != null)
		{
			FieldInfo parentField = parent.GetType().GetField("Particles");
			List<object> parentChildren = null;

			if(parentField != null)
			{
				parentField.SetValue(parent, this);
			}
			else
			{
				parentField = parent.GetType().GetField("Particless");

				if(parentField != null)
				{
					parentChildren = (List<object>)(parentField.GetValue(parent));
				}
				else
				{
					parentField = parent.GetType().GetField("CustomGeometrys");
					if(parentField != null)
					{
						parentChildren = (List<object>)(parentField.GetValue(parent));
					}
				}
				if(parentChildren == null)
				{
					FieldInfo childrenField = parent.GetType().GetField("children");
					if(childrenField != null)
					{
						parentChildren = (List<object>)childrenField.GetValue(parent);
					}
				}
				if(parentChildren != null)
				{
					parentChildren.Add(this);
				}

			}
		}
	}

	private string unescape(string s) {
		if (string.IsNullOrEmpty(s)) return s;

		string returnString = s;
		returnString = returnString.Replace("&amp;", "&");
		returnString = returnString.Replace("&apos;", "'");
		returnString = returnString.Replace("&quot;", "\"");
		returnString = returnString.Replace("&gt;", ">");
		returnString = returnString.Replace("&lt;", "<");
		return returnString;
	}

	public override void gaxb_loadattrs()
	{
		base.gaxb_loadattrs();


		string attr;
		attr = raw_systemName;
		if(attr != null) { attr = PlanetUnityOverride.processString(this, parent, attr); }
		if(attr != null) { systemName = unescape(attr); } 
		
		attr = raw_limitToInside;
		if(attr != null) { attr = PlanetUnityOverride.processString(this, parent, attr); }
		if(attr == null) { attr = "true"; }
		if(attr != null) { limitToInside = bool.Parse(attr); } 
		
		attr = raw_emitMode;
		if(attr != null) { attr = PlanetUnityOverride.processString(this, parent, attr); }
		if(attr == null) { attr = "SystemScaled"; }
		if(attr != null) { emitMode = (PlanetUnity2.ParticleEmitMode)Enum.Parse(typeof(PlanetUnity2.ParticleEmitMode), attr); } 
		
		attr = raw_adjustToFPS;
		if(attr != null) { attr = PlanetUnityOverride.processString(this, parent, attr); }
		if(attr == null) { attr = "true"; }
		if(attr != null) { adjustToFPS = bool.Parse(attr); } 
		
		attr = raw_customScale;
		if(attr != null) { attr = PlanetUnityOverride.processString(this, parent, attr); }
		if(attr != null) { customScale = new Vector2().PUParse(attr); } 
		
		attr = raw_imageMaskPath;
		if(attr != null) { attr = PlanetUnityOverride.processString(this, parent, attr); }
		if(attr != null) { imageMaskPath = unescape(attr); } 
		

	}

	public override void gaxb_load(TBXMLElement element, object _parent, Hashtable args)
	{
		base.gaxb_load(element, _parent, args);

		if(element == null && _parent == null)
			return;

		parent = _parent;

		if(this.GetType() == typeof( PUParticles ))
		{
			gaxb_addToParent();
		}

		//xmlns = element.GetAttribute("xmlns");

		raw_systemName = element.GetAttribute("systemName");		
		raw_limitToInside = element.GetAttribute("limitToInside");		
		raw_emitMode = element.GetAttribute("emitMode");		
		raw_adjustToFPS = element.GetAttribute("adjustToFPS");		
		raw_customScale = element.GetAttribute("customScale");		
		raw_imageMaskPath = element.GetAttribute("imageMaskPath");		
		gaxb_loadattrs();
	}







	public override void gaxb_appendXMLAttributes(StringBuilder sb)
	{
		base.gaxb_appendXMLAttributes(sb);

		if(systemName != null) { sb.AppendFormat (" {0}=\"{1}\"", "systemName", SecurityElement.Escape (systemName)); }
		 sb.AppendFormat (" {0}=\"{1}\"", "limitToInside", limitToInside.ToString().ToLower()); 
		if(emitMode != null) { sb.AppendFormat (" {0}=\"{1}\"", "emitMode", (int)emitMode); }
		 sb.AppendFormat (" {0}=\"{1}\"", "adjustToFPS", adjustToFPS.ToString().ToLower()); 
		if(customScale != null) { sb.AppendFormat (" {0}=\"{1}\"", "customScale", customScale.Value.PUToString()); }
		if(imageMaskPath != null) { sb.AppendFormat (" {0}=\"{1}\"", "imageMaskPath", SecurityElement.Escape (imageMaskPath)); }

	}

	public override void gaxb_appendXMLSequences(StringBuilder sb)
	{
		base.gaxb_appendXMLSequences(sb);


	}

	public override void gaxb_appendXML(StringBuilder sb)
	{
		if(sb.Length == 0)
		{
			sb.AppendFormat ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
		}

		sb.AppendFormat ("<{0}", "Particles");

		if(xmlns != null) {
			if(parent == null) {
				sb.AppendFormat (" {0}=\"{1}\"", "xmlns", xmlns);
			}else{
				FieldInfo parentField = parent.GetType().GetField("xmlns");
				if(parentField != null && xmlns.Equals(parentField.GetValue(parent)) == false)
				{
					sb.AppendFormat (" {0}=\"{1}\"", "xmlns", xmlns);
				}
			}
		}

		gaxb_appendXMLAttributes(sb);


		StringBuilder seq = new StringBuilder();
		seq.AppendFormat(" ");
		gaxb_appendXMLSequences(seq);

		if(seq.Length == 1)
		{
			sb.AppendFormat (" />");
		}
		else
		{
			sb.AppendFormat (">{0}</{1}>", seq.ToString(), "Particles");
		}
	}
}

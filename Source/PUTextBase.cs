

using UnityEngine;


//
// Autogenerated by gaxb ( https://github.com/SmallPlanet/gaxb )
//

using System;
using System.Xml;
using System.Text;
using System.Reflection;
using System.Collections.Generic;
using System.Collections;
using System.Security;
using TB;

public partial class PUText : PUTextBase {

	public PUText()
	{
		string attr;

		attr = "12";
		if(attr != null) { fontSize = (int)float.Parse(attr); } 
		attr = "0,0,0,1";
		if(attr != null) { fontColor = new Color().PUParse(attr); } 
		attr = "middleCenter";
		if(attr != null) { alignment = (PlanetUnity2.TextAlignment)Enum.Parse(typeof(PlanetUnity2.TextAlignment), attr); } 

	}
	

	public PUText(
			string font,
			int fontSize,
			PlanetUnity2.FontStyle fontStyle,
			Color fontColor,
			float lineSpacing,
			PlanetUnity2.TextAlignment alignment,
			string value,
			bool sizeToFit,
			int maxFontSize,
			int minFontSize,
			bool vOverflow,
			bool hOverflow,
			string onLinkClick ) : this()
	{
		this.font = font;

		this.fontSize = fontSize;

		this.fontStyle = fontStyle;

		this.fontColor = fontColor;

		this.lineSpacing = lineSpacing;

		this.alignment = alignment;

		this.value = value;

		this.sizeToFit = sizeToFit;

		this.maxFontSize = maxFontSize;

		this.minFontSize = minFontSize;

		this.vOverflow = vOverflow;

		this.hOverflow = hOverflow;

		this.onLinkClick = onLinkClick;
	}

	

	public PUText(
			string font,
			int fontSize,
			PlanetUnity2.FontStyle fontStyle,
			Color fontColor,
			float lineSpacing,
			PlanetUnity2.TextAlignment alignment,
			string value,
			bool sizeToFit,
			int maxFontSize,
			int minFontSize,
			bool vOverflow,
			bool hOverflow,
			string onLinkClick,
			Vector4 bounds,
			Vector3 position,
			Vector2 size,
			Vector3 rotation,
			Vector3 scale,
			Vector2 pivot,
			string anchor,
			bool active,
			bool rectMask2D,
			bool mask,
			bool showMaskGraphic,
			Vector4 maskInset,
			bool outline,
			float lastY,
			float lastX,
			string shader,
			bool ignoreMouse,
			string components,
			string title,
			string tag,
			string tag1,
			string tag2,
			string tag3,
			string tag4,
			string tag5,
			string tag6 ) : this()
	{
		this.font = font;

		this.fontSize = fontSize;

		this.fontStyle = fontStyle;

		this.fontColor = fontColor;

		this.lineSpacing = lineSpacing;

		this.alignment = alignment;

		this.value = value;

		this.sizeToFit = sizeToFit;

		this.maxFontSize = maxFontSize;

		this.minFontSize = minFontSize;

		this.vOverflow = vOverflow;

		this.hOverflow = hOverflow;

		this.onLinkClick = onLinkClick;

		this.bounds = bounds;

		this.position = position;

		this.size = size;

		this.rotation = rotation;

		this.scale = scale;

		this.pivot = pivot;

		this.anchor = anchor;

		this.active = active;

		this.rectMask2D = rectMask2D;

		this.mask = mask;

		this.showMaskGraphic = showMaskGraphic;

		this.maskInset = maskInset;

		this.outline = outline;

		this.lastY = lastY;

		this.lastX = lastX;

		this.shader = shader;

		this.ignoreMouse = ignoreMouse;

		this.components = components;

		this.title = title;

		this.tag = tag;

		this.tag1 = tag1;

		this.tag2 = tag2;

		this.tag3 = tag3;

		this.tag4 = tag4;

		this.tag5 = tag5;

		this.tag6 = tag6;
	}


}




public class PUTextBase : PUGameObject {






	// XML Attributes
	public string font;
	public int? fontSize;
	public PlanetUnity2.FontStyle? fontStyle;
	public Color? fontColor;
	public float? lineSpacing;
	public PlanetUnity2.TextAlignment? alignment;
	public string value;
	public bool sizeToFit;
	public int? maxFontSize;
	public int? minFontSize;
	public bool vOverflow;
	public bool hOverflow;
	public string onLinkClick;




	public override void gaxb_unload()
	{
		base.gaxb_unload();

	}

	public new void gaxb_addToParent()

	{
		if(parent != null)
		{
			FieldInfo parentField = parent.GetType().GetField("Text");
			List<object> parentChildren = null;

			if(parentField != null)
			{
				parentField.SetValue(parent, this);
			}
			else
			{
				parentField = parent.GetType().GetField("Texts");

				if(parentField != null)
				{
					parentChildren = (List<object>)(parentField.GetValue(parent));
				}
				else
				{
					parentField = parent.GetType().GetField("GameObjects");
					if(parentField != null)
					{
						parentChildren = (List<object>)(parentField.GetValue(parent));
					}
				}
				if(parentChildren == null)
				{
					FieldInfo childrenField = parent.GetType().GetField("children");
					if(childrenField != null)
					{
						parentChildren = (List<object>)childrenField.GetValue(parent);
					}
				}
				if(parentChildren != null)
				{
					parentChildren.Add(this);
				}

			}
		}
	}

	private string unescape(string s) {
		if (string.IsNullOrEmpty(s)) return s;

		string returnString = s;
		returnString = returnString.Replace("&amp;", "&");
		returnString = returnString.Replace("&apos;", "'");
		returnString = returnString.Replace("&quot;", "\"");
		returnString = returnString.Replace("&gt;", ">");
		returnString = returnString.Replace("&lt;", "<");
		return returnString;
	}

	public override void gaxb_load(TBXMLElement element, object _parent, Hashtable args)
	{
		base.gaxb_load(element, _parent, args);

		if(element == null && _parent == null)
			return;

		parent = _parent;

		if(this.GetType() == typeof( PUText ))
		{
			gaxb_addToParent();
		}

		//xmlns = element.GetAttribute("xmlns");


		string attr;
		attr = element.GetAttribute("font");
		if(attr != null) { attr = PlanetUnityOverride.processString(_parent, attr); }
		if(attr != null) { font = unescape(attr); } 
		
		attr = element.GetAttribute("fontSize");
		if(attr != null) { attr = PlanetUnityOverride.processString(_parent, attr); }
		if(attr == null) { attr = "12"; }
		if(attr != null) { fontSize = (int)float.Parse(attr); } 
		
		attr = element.GetAttribute("fontStyle");
		if(attr != null) { attr = PlanetUnityOverride.processString(_parent, attr); }
		if(attr != null) { fontStyle = (PlanetUnity2.FontStyle)Enum.Parse(typeof(PlanetUnity2.FontStyle), attr); } 
		
		attr = element.GetAttribute("fontColor");
		if(attr != null) { attr = PlanetUnityOverride.processString(_parent, attr); }
		if(attr == null) { attr = "0,0,0,1"; }
		if(attr != null) { fontColor = new Color().PUParse(attr); } 
		
		attr = element.GetAttribute("lineSpacing");
		if(attr != null) { attr = PlanetUnityOverride.processString(_parent, attr); }
		if(attr != null) { lineSpacing = float.Parse(attr); } 
		
		attr = element.GetAttribute("alignment");
		if(attr != null) { attr = PlanetUnityOverride.processString(_parent, attr); }
		if(attr == null) { attr = "middleCenter"; }
		if(attr != null) { alignment = (PlanetUnity2.TextAlignment)Enum.Parse(typeof(PlanetUnity2.TextAlignment), attr); } 
		
		attr = element.GetAttribute("value");
		if(attr != null) { attr = PlanetUnityOverride.processString(_parent, attr); }
		if(attr != null) { value = unescape(attr); } 
		
		attr = element.GetAttribute("sizeToFit");
		if(attr != null) { attr = PlanetUnityOverride.processString(_parent, attr); }
		if(attr != null) { sizeToFit = bool.Parse(attr); } 
		
		attr = element.GetAttribute("maxFontSize");
		if(attr != null) { attr = PlanetUnityOverride.processString(_parent, attr); }
		if(attr != null) { maxFontSize = (int)float.Parse(attr); } 
		
		attr = element.GetAttribute("minFontSize");
		if(attr != null) { attr = PlanetUnityOverride.processString(_parent, attr); }
		if(attr != null) { minFontSize = (int)float.Parse(attr); } 
		
		attr = element.GetAttribute("vOverflow");
		if(attr != null) { attr = PlanetUnityOverride.processString(_parent, attr); }
		if(attr != null) { vOverflow = bool.Parse(attr); } 
		
		attr = element.GetAttribute("hOverflow");
		if(attr != null) { attr = PlanetUnityOverride.processString(_parent, attr); }
		if(attr != null) { hOverflow = bool.Parse(attr); } 
		
		attr = element.GetAttribute("onLinkClick");
		if(attr != null) { attr = PlanetUnityOverride.processString(_parent, attr); }
		if(attr != null) { onLinkClick = unescape(attr); } 
		

	}







	public override void gaxb_appendXMLAttributes(StringBuilder sb)
	{
		base.gaxb_appendXMLAttributes(sb);

		if(font != null) { sb.AppendFormat (" {0}=\"{1}\"", "font", SecurityElement.Escape (font)); }
		if(fontSize != null) { sb.AppendFormat (" {0}=\"{1}\"", "fontSize", fontSize); }
		if(fontStyle != null) { sb.AppendFormat (" {0}=\"{1}\"", "fontStyle", (int)fontStyle); }
		if(fontColor != null) { sb.AppendFormat (" {0}=\"{1}\"", "fontColor", fontColor.Value.PUToString()); }
		if(lineSpacing != null) { sb.AppendFormat (" {0}=\"{1}\"", "lineSpacing", lineSpacing.Value.ToString ("0.##")); }
		if(alignment != null) { sb.AppendFormat (" {0}=\"{1}\"", "alignment", (int)alignment); }
		if(value != null) { sb.AppendFormat (" {0}=\"{1}\"", "value", SecurityElement.Escape (value)); }
		 sb.AppendFormat (" {0}=\"{1}\"", "sizeToFit", sizeToFit.ToString().ToLower()); 
		if(maxFontSize != null) { sb.AppendFormat (" {0}=\"{1}\"", "maxFontSize", maxFontSize); }
		if(minFontSize != null) { sb.AppendFormat (" {0}=\"{1}\"", "minFontSize", minFontSize); }
		 sb.AppendFormat (" {0}=\"{1}\"", "vOverflow", vOverflow.ToString().ToLower()); 
		 sb.AppendFormat (" {0}=\"{1}\"", "hOverflow", hOverflow.ToString().ToLower()); 
		if(onLinkClick != null) { sb.AppendFormat (" {0}=\"{1}\"", "onLinkClick", SecurityElement.Escape (onLinkClick)); }

	}

	public override void gaxb_appendXMLSequences(StringBuilder sb)
	{
		base.gaxb_appendXMLSequences(sb);


	}

	public override void gaxb_appendXML(StringBuilder sb)
	{
		if(sb.Length == 0)
		{
			sb.AppendFormat ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
		}

		sb.AppendFormat ("<{0}", "Text");

		if(xmlns != null) {
			if(parent == null) {
				sb.AppendFormat (" {0}=\"{1}\"", "xmlns", xmlns);
			}else{
				FieldInfo parentField = parent.GetType().GetField("xmlns");
				if(parentField != null && xmlns.Equals(parentField.GetValue(parent)) == false)
				{
					sb.AppendFormat (" {0}=\"{1}\"", "xmlns", xmlns);
				}
			}
		}

		gaxb_appendXMLAttributes(sb);


		StringBuilder seq = new StringBuilder();
		seq.AppendFormat(" ");
		gaxb_appendXMLSequences(seq);

		if(seq.Length == 1)
		{
			sb.AppendFormat (" />");
		}
		else
		{
			sb.AppendFormat (">{0}</{1}>", seq.ToString(), "Text");
		}
	}
}

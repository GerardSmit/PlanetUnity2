

using UnityEngine;


//
// Autogenerated by gaxb ( https://github.com/SmallPlanet/gaxb )
//

using System;
using System.Xml;
using System.Text;
using System.Reflection;
using System.Collections.Generic;
using System.Collections;
using System.Security;
using TB;

public partial class PUSlider : PUSliderBase {

	public PUSlider()
	{
		string attr;

		attr = "32,32";
		if(attr != null) { handleSize = new Vector2().PUParse(attr); } 
		attr = "0";
		if(attr != null) { minValue = float.Parse(attr); } 
		attr = "1";
		if(attr != null) { maxValue = float.Parse(attr); } 

	}
	

	public PUSlider(
			string handleResourcePath,
			Vector2 handleSize,
			string fillResourcePath,
			string onValueChanged,
			float minValue,
			float maxValue,
			PlanetUnity2.SliderDirection direction,
			string resourcePath ) : this()
	{
		this.handleResourcePath = handleResourcePath;

		this.handleSize = handleSize;

		this.fillResourcePath = fillResourcePath;

		this.onValueChanged = onValueChanged;

		this.minValue = minValue;

		this.maxValue = maxValue;

		this.direction = direction;

		this.resourcePath = resourcePath;
	}

	

	public PUSlider(
			string handleResourcePath,
			Vector2 handleSize,
			string fillResourcePath,
			string onValueChanged,
			float minValue,
			float maxValue,
			PlanetUnity2.SliderDirection direction,
			string resourcePath,
			Color color,
			PlanetUnity2.ImageType type,
			Vector4 bounds,
			Vector3 position,
			Vector2 size,
			Vector3 rotation,
			Vector3 scale,
			Vector2 pivot,
			string anchor,
			bool active,
			bool rectMask2D,
			bool mask,
			bool showMaskGraphic,
			Vector4 maskInset,
			bool outline,
			float lastY,
			float lastX,
			string shader,
			bool ignoreMouse,
			string components,
			string title,
			string tag,
			string tag1,
			string tag2,
			string tag3,
			string tag4,
			string tag5,
			string tag6 ) : this()
	{
		this.handleResourcePath = handleResourcePath;

		this.handleSize = handleSize;

		this.fillResourcePath = fillResourcePath;

		this.onValueChanged = onValueChanged;

		this.minValue = minValue;

		this.maxValue = maxValue;

		this.direction = direction;

		this.resourcePath = resourcePath;

		this.color = color;

		this.type = type;

		this.bounds = bounds;

		this.position = position;

		this.size = size;

		this.rotation = rotation;

		this.scale = scale;

		this.pivot = pivot;

		this.anchor = anchor;

		this.active = active;

		this.rectMask2D = rectMask2D;

		this.mask = mask;

		this.showMaskGraphic = showMaskGraphic;

		this.maskInset = maskInset;

		this.outline = outline;

		this.lastY = lastY;

		this.lastX = lastX;

		this.shader = shader;

		this.ignoreMouse = ignoreMouse;

		this.components = components;

		this.title = title;

		this.tag = tag;

		this.tag1 = tag1;

		this.tag2 = tag2;

		this.tag3 = tag3;

		this.tag4 = tag4;

		this.tag5 = tag5;

		this.tag6 = tag6;
	}


}




public class PUSliderBase : PUImage {






	// XML Attributes
	public string raw_handleResourcePath;
	public string handleResourcePath;
	public string raw_handleSize;
	public Vector2? handleSize;
	public string raw_fillResourcePath;
	public string fillResourcePath;
	public string raw_onValueChanged;
	public string onValueChanged;
	public string raw_minValue;
	public float? minValue;
	public string raw_maxValue;
	public float? maxValue;
	public string raw_direction;
	public PlanetUnity2.SliderDirection? direction;




	public override void gaxb_unload()
	{
		base.gaxb_unload();

	}

	public new void gaxb_addToParent()

	{
		if(parent != null)
		{
			FieldInfo parentField = parent.GetType().GetField("Slider");
			List<object> parentChildren = null;

			if(parentField != null)
			{
				parentField.SetValue(parent, this);
			}
			else
			{
				parentField = parent.GetType().GetField("Sliders");

				if(parentField != null)
				{
					parentChildren = (List<object>)(parentField.GetValue(parent));
				}
				else
				{
					parentField = parent.GetType().GetField("Images");
					if(parentField != null)
					{
						parentChildren = (List<object>)(parentField.GetValue(parent));
					}
				}
				if(parentChildren == null)
				{
					FieldInfo childrenField = parent.GetType().GetField("children");
					if(childrenField != null)
					{
						parentChildren = (List<object>)childrenField.GetValue(parent);
					}
				}
				if(parentChildren != null)
				{
					parentChildren.Add(this);
				}

			}
		}
	}

	private string unescape(string s) {
		if (string.IsNullOrEmpty(s)) return s;

		string returnString = s;
		returnString = returnString.Replace("&amp;", "&");
		returnString = returnString.Replace("&apos;", "'");
		returnString = returnString.Replace("&quot;", "\"");
		returnString = returnString.Replace("&gt;", ">");
		returnString = returnString.Replace("&lt;", "<");
		return returnString;
	}

	public override void gaxb_loadattrs()
	{
		base.gaxb_loadattrs();


		string attr;
		attr = raw_handleResourcePath;
		if(attr != null) { attr = PlanetUnityOverride.processString(this, parent, attr); }
		if(attr != null) { handleResourcePath = unescape(attr); } 
		
		attr = raw_handleSize;
		if(attr != null) { attr = PlanetUnityOverride.processString(this, parent, attr); }
		if(attr == null) { attr = "32,32"; }
		if(attr != null) { handleSize = new Vector2().PUParse(attr); } 
		
		attr = raw_fillResourcePath;
		if(attr != null) { attr = PlanetUnityOverride.processString(this, parent, attr); }
		if(attr != null) { fillResourcePath = unescape(attr); } 
		
		attr = raw_onValueChanged;
		if(attr != null) { attr = PlanetUnityOverride.processString(this, parent, attr); }
		if(attr != null) { onValueChanged = unescape(attr); } 
		
		attr = raw_minValue;
		if(attr != null) { attr = PlanetUnityOverride.processString(this, parent, attr); }
		if(attr == null) { attr = "0"; }
		if(attr != null) { minValue = float.Parse(attr); } 
		
		attr = raw_maxValue;
		if(attr != null) { attr = PlanetUnityOverride.processString(this, parent, attr); }
		if(attr == null) { attr = "1"; }
		if(attr != null) { maxValue = float.Parse(attr); } 
		
		attr = raw_direction;
		if(attr != null) { attr = PlanetUnityOverride.processString(this, parent, attr); }
		if(attr != null) { direction = (PlanetUnity2.SliderDirection)Enum.Parse(typeof(PlanetUnity2.SliderDirection), attr); } 
		

	}

	public override void gaxb_load(TBXMLElement element, object _parent, Hashtable args)
	{
		base.gaxb_load(element, _parent, args);

		if(element == null && _parent == null)
			return;

		parent = _parent;

		if(this.GetType() == typeof( PUSlider ))
		{
			gaxb_addToParent();
		}

		//xmlns = element.GetAttribute("xmlns");

		raw_handleResourcePath = element.GetAttribute("handleResourcePath");		
		raw_handleSize = element.GetAttribute("handleSize");		
		raw_fillResourcePath = element.GetAttribute("fillResourcePath");		
		raw_onValueChanged = element.GetAttribute("onValueChanged");		
		raw_minValue = element.GetAttribute("minValue");		
		raw_maxValue = element.GetAttribute("maxValue");		
		raw_direction = element.GetAttribute("direction");		
		gaxb_loadattrs();
	}







	public override void gaxb_appendXMLAttributes(StringBuilder sb)
	{
		base.gaxb_appendXMLAttributes(sb);

		if(handleResourcePath != null) { sb.AppendFormat (" {0}=\"{1}\"", "handleResourcePath", SecurityElement.Escape (handleResourcePath)); }
		if(handleSize != null) { sb.AppendFormat (" {0}=\"{1}\"", "handleSize", handleSize.Value.PUToString()); }
		if(fillResourcePath != null) { sb.AppendFormat (" {0}=\"{1}\"", "fillResourcePath", SecurityElement.Escape (fillResourcePath)); }
		if(onValueChanged != null) { sb.AppendFormat (" {0}=\"{1}\"", "onValueChanged", SecurityElement.Escape (onValueChanged)); }
		if(minValue != null) { sb.AppendFormat (" {0}=\"{1}\"", "minValue", minValue.Value.ToString ("0.##")); }
		if(maxValue != null) { sb.AppendFormat (" {0}=\"{1}\"", "maxValue", maxValue.Value.ToString ("0.##")); }
		if(direction != null) { sb.AppendFormat (" {0}=\"{1}\"", "direction", (int)direction); }

	}

	public override void gaxb_appendXMLSequences(StringBuilder sb)
	{
		base.gaxb_appendXMLSequences(sb);


	}

	public override void gaxb_appendXML(StringBuilder sb)
	{
		if(sb.Length == 0)
		{
			sb.AppendFormat ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
		}

		sb.AppendFormat ("<{0}", "Slider");

		if(xmlns != null) {
			if(parent == null) {
				sb.AppendFormat (" {0}=\"{1}\"", "xmlns", xmlns);
			}else{
				FieldInfo parentField = parent.GetType().GetField("xmlns");
				if(parentField != null && xmlns.Equals(parentField.GetValue(parent)) == false)
				{
					sb.AppendFormat (" {0}=\"{1}\"", "xmlns", xmlns);
				}
			}
		}

		gaxb_appendXMLAttributes(sb);


		StringBuilder seq = new StringBuilder();
		seq.AppendFormat(" ");
		gaxb_appendXMLSequences(seq);

		if(seq.Length == 1)
		{
			sb.AppendFormat (" />");
		}
		else
		{
			sb.AppendFormat (">{0}</{1}>", seq.ToString(), "Slider");
		}
	}
}
